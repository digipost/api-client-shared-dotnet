//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Digipost.Api.Client.Shared.Resources.Language.Data {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class en_us {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal en_us() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Digipost.Api.Client.Shared.Resources.Language.Data.en-us", typeof(en_us).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find certificate with thumbprint {0:certificateThumbrint}.
        /// </summary>
        internal static string CertificateCouldNotFind {
            get {
                return ResourceManager.GetString("CertificateCouldNotFind", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to expired on {0:expirationDateString}..
        /// </summary>
        internal static string CertificateExpiredResult {
            get {
                return ResourceManager.GetString("CertificateExpiredResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to has the following certificate chain errors: {0:prettyChainErrorStatuses}.
        /// </summary>
        internal static string CertificateInvalidChainResult {
            get {
                return ResourceManager.GetString("CertificateInvalidChainResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate is null! Please check that the certificate is loaded correctly..
        /// </summary>
        internal static string CertificateIsNull {
            get {
                return ResourceManager.GetString("CertificateIsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to is not active until {0:effectiveDateString}.
        /// </summary>
        internal static string CertificateNotActivatedResult {
            get {
                return ResourceManager.GetString("CertificateNotActivatedResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to is not issued to organization number &apos;{0:certificateOrganizationNumber}&apos;. This occurs if the certificate is issued to a different organization or if it isn&apos;t an organizational certificate. An organizational certificate can be aquired from Buypass or Commfides..
        /// </summary>
        internal static string CertificateNotIssuedToOrganization {
            get {
                return ResourceManager.GetString("CertificateNotIssuedToOrganization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to is invalid because the chain length is 1. This means that the certificate is self signed. An organizational certificate issued by a valid certificate issuer is required.  An organizational certificate can be aquired from Buypass or Commfides.
        /// </summary>
        internal static string CertificateSelfSignedErrorResult {
            get {
                return ResourceManager.GetString("CertificateSelfSignedErrorResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Certificate with Subject &apos;{0:certificateSubject}&apos; and Thumbprint &apos;{1:certificateThumbprint}&apos; {2:certificateExtraInfo}.
        /// </summary>
        internal static string CertificateShortDescription {
            get {
                return ResourceManager.GetString("CertificateShortDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validation of {0:certificateShortDescription} failed.
        ///This happened because the chain was built with the following certificates:
        ///{1:chainAsString}, but only the following are allowed to build the chain:
        ///{2:validatorCertificatesAsString}. This usually happens if the certificate is retrieved from Windows Certificate Store and this is not allowed during validation. The chain can only be built using the validator certificates..
        /// </summary>
        internal static string CertificateUsedExternalResult {
            get {
                return ResourceManager.GetString("CertificateUsedExternalResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to is a valid certificate..
        /// </summary>
        internal static string CertificateValidResult {
            get {
                return ResourceManager.GetString("CertificateValidResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;PrefixList&apos; attribute is invalid - The value &apos;&apos; is invalid according to its datatype &apos;http://www.w3.org/2001/XMLSchema:NMTOKENS&apos; - The attribute value cannot be empty..
        /// </summary>
        internal static string ToleratedPrefixListError {
            get {
                return ResourceManager.GetString("ToleratedPrefixListError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is an error if there is a member of the attribute uses of a type definition with type xs:ID or derived from xs:ID and another attribute with type xs:ID matches an attribute wildcard..
        /// </summary>
        internal static string ToleratedXsdIdError {
            get {
                return ResourceManager.GetString("ToleratedXsdIdError", resourceCulture);
            }
        }
    }
}
